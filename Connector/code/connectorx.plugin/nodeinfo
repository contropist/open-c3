#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use Logs;
use JSON qw();

$| ++;

=head1 SYNOPSIS

    id => 1,
    logs => 日志对象

=cut

my ( @group, $debug, $apicache );
BEGIN{
    use Configini;
    map{
        my $id = $_;
        my %g;
        $g{nodeinfo} = Configini::get( "nodeinfo$id" );
        my %env = Configini::env( "nodeinfoenv$id" );
        $g{env} = %env ? \%env : +{};

        $g{nodeinfoeid} = Configini::get( "nodeinfoeid$id" );
        $g{nodeinfoeid} = undef unless $g{nodeinfoeid} && ref $g{nodeinfoeid} eq 'ARRAY' && @{$g{nodeinfoeid}} == 2;

        push @group, \%g if $g{nodeinfo};
    }( '', 1 .. 9 );
    $debug = Configini::get( 'debug' );
    $apicache = Configini::get( 'apicache' );
    $apicache = 0 unless $apicache && $apicache =~ /^\d+$/;
};

sub getnodeinfo
{
    my ( %param )= @_;
    my ( $id, $logs, $nodeinfo, $env ) = @param{qw(id logs nodeinfo env )};

    $logs = Logs->new( 'code.nodeinfo' ) unless $logs;

    $logs->die( "id not a number" ) unless $id =~ /^\d+$/;

    my $ua = LWP::UserAgent->new;
    $ua->default_header( %$env ) if $env;
    $ua->timeout( 10 );

    my $file;
    if( $apicache )
    {
        $file = "/tmp/openc3-cache-api-nodeinfo-$id";

        $ua->timeout( 3 );

        if( -f $file )
        {
            my $apicachetimeout = -f '/var/openc3_connector_api_fail' ? 86400 : $apicache;

            my $mtime = ( stat $file )[9];
            if( $mtime  && ( $mtime + $apicachetimeout > time ) )
            {
                my $filecont = eval{ YAML::XS::LoadFile $file };
                if( $filecont && ref $filecont eq 'ARRAY' )
                {
                    $logs->say( "nodeinfo api usetime: cache" );
                    return @$filecont;
                }
            }
         }
    }

    my $t = time;
    my $res = $ua->get( "$nodeinfo$id" );

    $logs->say( YAML::XS::Dump $res ) if $debug;
    my $utime = time - $t;
    $logs->say( "nodeinfo api usetime: $utime" );

    if($res->is_success)
    {
        my $v = eval{JSON::decode_json $res->decoded_content};
        if( $v->{stat} && ref $v->{data} eq 'ARRAY' )
        {
            eval{ YAML::XS::DumpFile $file, $v->{data} } if $apicache;
            return @{$v->{data}};
        }
    }
    elsif( $apicache )
    {
        warn sprintf "nodeinfo err: %s\n", YAML::XS::Dump $res;

        if( -f $file )
        {
            my $mtime = ( stat $file )[9];
            if( $mtime  && ( $mtime + 86400 > time ) )
            {
                my $filecont = eval{ YAML::XS::LoadFile $file };
                if( $filecont && ref $filecont eq 'ARRAY' )
                {
                    $logs->err( "nodeinfo api usetime: cache" );
                    return @$filecont;
                }
            }
         }
    }
    #TODO die
    die sprintf "nodeinfo err: %s\n", YAML::XS::Dump $res;
}

sub getconfig
{
    my $id = shift @_;
    for my $g ( @group )
    {
        return $g if $g->{nodeinfoeid} && $g->{nodeinfoeid}[0] <= $id && $id <= $g->{nodeinfoeid}[1];
    }
    return $group[0];
}

return sub
{
    my ( %param ) = @_;
    my $config = getconfig( $param{id} );
    return getnodeinfo( %param, %$config );
}
