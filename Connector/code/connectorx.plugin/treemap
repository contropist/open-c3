#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib -I/data/Software/mydan/Connector/private/lib
use strict;
use warnings;
use Logs;
use LWP::UserAgent;
use JSON qw();

$| ++;

=head1 SYNOPSIS

    cookie => 'cookiestring',
    logs => 日志对象

=cut

my ( @group, $debug, $apicache );
BEGIN{
    use Configini;
    map{
        my $id = $_;
        my %g = ( id => $id );
        $g{treemap} = Configini::get( "treemap$id" );
        my %env = Configini::env( "treemapenv$id" );
        $g{env} = %env ? \%env : +{};

        $g{treemapgrep} = Configini::get( "treemapgrep$id" );
        $g{treemapgrep} = undef unless $g{treemapgrep} && ref $g{treemapgrep} eq 'ARRAY';

        $g{treemapeid} = Configini::get( "treemapeid$id" );
        $g{treemapeid} = undef unless $g{treemapeid} && ref $g{treemapeid} eq 'ARRAY' && @{$g{treemapeid}} == 2;

        push @group, \%g if $g{treemap};
    }( '', 1 .. 9 );
    $debug = Configini::get( 'debug' );
    $apicache = Configini::get( 'apicache' );
    $apicache = 0 unless $apicache && $apicache =~ /^\d+$/;
};

sub gettreemap
{
    my ( %param )= @_;
    my ( $cookie, $logs, $id, $treemap, $env, $treemapgrep, $treemapeid ) = @param{qw(cookie logs id treemap env treemapgrep treemapeid )};

    $logs = Logs->new( 'code.treemap' ) unless $logs;
#    $logs->die( "id not a number" ) unless $id =~ /^\d+$/;

    my $ua = LWP::UserAgent->new;
    $ua->default_header( %$env ) if $env;
    $ua->timeout( 10 );

    my $file;
    if( $apicache )
    {
        $file = "/tmp/openc3-cache-api-treemap$id";
        $ua->timeout( 3 );

        if( -f $file )
        {
            my $apicachetimeout = -f '/var/openc3_connector_api_fail' ? 86400 : $apicache;

            my $mtime = ( stat $file )[9];
            if( $mtime  && ( $mtime + $apicachetimeout > time ) )
            {
                my $filecont = eval{ YAML::XS::LoadFile $file };
                if( $filecont && ! $@ )
                {
                    $logs->say( "treemap api usetime: cache" );
                    my $t = $treemapgrep ? TreeMap::mapgrep( $filecont, @$treemapgrep ) : $filecont;
                    return $treemapeid ?  TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
                }
            }
        }
    }



    my $t = time;
    my $res = $ua->get( $treemap );

    $logs->say( YAML::XS::Dump $res ) if $debug;
    my $utime = time - $t;
    $logs->say( "treemap api usetime: $utime" );

    if($res->is_success)
    {
        my $v = eval{JSON::decode_json $res->decoded_content};
        eval{ YAML::XS::DumpFile $file, $v->{data} } if $apicache && $v->{stat};
        if( $v->{stat} )
        {
            my $t = $treemapgrep ? TreeMap::mapgrep( $v->{data}, @$treemapgrep ) : $v->{data};
            return $treemapeid ?  TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
        }
    }
    elsif( $apicache )
    {

        warn sprintf "treemap err: %s\n", YAML::XS::Dump $res;

        if( -f $file )
        {
            my $mtime = ( stat $file )[9];
            if( $mtime  && ( $mtime + 86400 > time ) )
            {
                my $filecont = eval{ YAML::XS::LoadFile $file };
                if( $filecont && ! $@ )
                {
                    $logs->err( "treemap api usetime: cache" );
                    my $t = $treemapgrep ? TreeMap::mapgrep( $filecont, @$treemapgrep ) : $filecont;
                    return $treemapeid ?  TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
                }
            }
        }
    }
    #TODO die

    die sprintf "treemap err: %s\n", YAML::XS::Dump $res;
}

return sub
{
    my ( %param, @res ) = @_;
    map{ push @res, @{ gettreemap( %param, %$_ ) }; }@group;
    return \@res;
}
