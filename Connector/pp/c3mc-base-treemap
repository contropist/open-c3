#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use MYDB;
use MYDan::Util::OptConf;
use LWP::UserAgent;
use JSON;
use Configini;
use TreeMap;

=head1 SYNOPSIS

 $0

=cut

sub gettreemap
{
    my ( $id, $treemap, %env ) = shift @_;
    $treemap = Configini::get( "treemap$id" );
    return [] unless $treemap;

    %env = Configini::env( "treemapenv$id" );

    my $treemapgrep = Configini::get( "treemapgrep$id" );
    $treemapgrep = undef unless $treemapgrep && ref $treemapgrep eq 'ARRAY';

    my $treemapeid = Configini::get( "treemapeid$id" );
    $treemapeid = undef unless $treemapeid && ref $treemapeid eq 'ARRAY' && @$treemapeid == 2;

    if( $treemap =~ /api.connector.open-c3.org/ )
    {
        my $db = MYDB->new( "/data/Software/mydan/Connector/conf/conn" );
        my @col = qw( id name len update_time );
        my $x = eval{ $db->query( sprintf( "select %s from openc3_connector_tree", join ',',@col ), \@col); };
        die if $@;
        my $t = $treemapgrep ? TreeMap::mapgrep( $x, @$treemapgrep ) : $x;
        return $treemapeid ? TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
    }

    my $ua = LWP::UserAgent->new;
    $ua->default_header( %env ) if %env;

    my $res = $ua->get( $treemap );

    my $err = sprintf "get treemap fail: $treemap: %s", YAML::XS::Dump $res;
    $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;

    die sprintf( "$err: code %s", $res->code ) unless $res->is_success;

    my $v = eval{JSON::decode_json $res->decoded_content};
    die "$err: data no JSON: $@" if $@;
    die $err unless $v->{stat};
    die "$err: data no ARRAY" unless $v->{data} && ref $v->{data} eq 'ARRAY';

    my $t = $treemapgrep ? TreeMap::mapgrep( $v->{data}, @$treemapgrep ) : $v->{data};
    return $treemapeid ? TreeMap::mapgrepeid( $t, $treemapeid ) : $t;
}

map{
    my $tree = gettreemap($_);
    map{
        if( defined $_->{id} && defined $_->{name} && $_->{id} =~ /^\d+$/ )
        {
            print "$_->{id};$_->{name}\n";
        }
        else
        {
            warn "[warn] treemap fromat no good";
        }
    }@$tree;
}'', 1 .. 9;
