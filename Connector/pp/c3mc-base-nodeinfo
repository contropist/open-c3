#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/Connector/lib
use strict;
use warnings;

binmode STDIN, ':utf8';
binmode STDOUT, ':utf8';
binmode STDERR, ':utf8';

$|++;

use MYDB;
use MYDan::Util::OptConf;
use LWP::UserAgent;
use JSON;
use Configini;

=head1 SYNOPSIS

 $0 col1 col2 .. col2 [ --col name,inip [id|name|type|inip|exip|projectid] ]

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->set( col => 'name,inip' )->get( qw( col=s ) )->dump();

my @col = split /,/, $o{col};

my @group;
map{
    my $id = $_;
    my %g;
    $g{nodeinfo} = Configini::get( "nodeinfo$id" );
    my %env = Configini::env( "nodeinfoenv$id" );
    $g{env} = %env ? \%env : +{};

    $g{nodeinfoeid} = Configini::get( "nodeinfoeid$id" );
    $g{nodeinfoeid} = undef unless $g{nodeinfoeid} && ref $g{nodeinfoeid} eq 'ARRAY' && @{$g{nodeinfoeid}} == 2;

    push @group, \%g if $g{nodeinfo};
}( '', 1 .. 9 );
 
my $db = MYDB->new( "/data/Software/mydan/Connector/conf/conn", delayedconnection => 1 );

sub getnodeinfo
{
    my ( %param )= @_;
    my ( $id, $nodeinfo, $env ) = @param{qw(id nodeinfo env )};
    die unless $id =~ /^\d+$/;

    if( $nodeinfo =~ /api.connector.open-c3.org/ )
    {
        my $x = eval{ $db->query( sprintf "select $o{col} from openc3_connector_nodelist where projectid=$id and status='available'" ); };
        die $@ if $@;
        map{ printf "%s\n", join ';', @$_ }@$x;
        return;
    }

    my $ua = LWP::UserAgent->new;
    $ua->timeout( 5 );
    $ua->default_header( %$env ) if $env;

    my $res = $ua->get( "${nodeinfo}$id" );

    my $err = sprintf "get nodeinfo fail: ${nodeinfo}$id: %s", YAML::XS::Dump $res;
    $err =~ s/appkey:\s+['"]?[a-zA-Z0-9]{32}['"]?\b/appkey: ******/g;

    die sprintf( "$err: code %s", $res->code ) unless $res->is_success;

    my $v = eval{JSON::decode_json $res->decoded_content};
    die "$err: data no JSON: $@" if $@;
    die $err unless $v->{stat};
    die "$err: data no ARRAY" unless $v->{data} && ref $v->{data} eq 'ARRAY';

    for my $t ( @{$v->{data}} )
    {
        $t->{projectid} = $id;
        printf "%s\n", join ';', map{ $t->{$_} || '' }@col;
    }
}

sub getconfig
{
    my $id = shift @_;
    for my $g ( @group )
    {
        return $g if $g->{nodeinfoeid} && $g->{nodeinfoeid}[0] <= $id && $id <= $g->{nodeinfoeid}[1];
    }
    return $group[0];
}

sub nodeinfo
{
    my $id = shift @_;
    die unless $id =~ /^\d+$/;
    my $config = getconfig( $id );
    getnodeinfo( id => $id, %$config );
}

if( @ARGV ) { map{ nodeinfo( $_ ) }@ARGV; } else { while(<STDIN>){ chomp; nodeinfo($_); } }
