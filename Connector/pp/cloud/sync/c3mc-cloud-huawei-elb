#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from huaweicloudsdkcore.auth.credentials import GlobalCredentials, BasicCredentials
from huaweicloudsdkcore.region.region import Region
from huaweicloudsdkelb.v3.region.elb_region import ElbRegion
from huaweicloudsdkelb.v3 import *
from huaweicloudsdkiam.v3 import *


class Elb:
    def __init__(self, access_id, access_key, project_id, region):
        self.access_id = access_id
        self.access_key = access_key
        self.region = region
        self.project_id = project_id if project_id not in [None, "None"] else self.get_project_id()
        self.client = self.create_client()

    def get_project_id(self):
        # 定义 IAM 端点映射
        iam_endpoints = {
            "eu-west-101": "https://iam.myhuaweicloud.eu",  # 都柏林地区
            "default": "https://iam.myhuaweicloud.com"  # 默认端点
        }

        # 选择合适的 IAM 端点
        iam_endpoint = iam_endpoints.get(self.region, iam_endpoints["default"])

        credentials = GlobalCredentials(self.access_id, self.access_key)
        iam_client = IamClient.new_builder() \
            .with_credentials(credentials) \
            .with_endpoint(iam_endpoint) \
            .build()

        try:
            request = KeystoneListProjectsRequest()
            response = iam_client.keystone_list_projects(request)
            for project in response.projects:
                if project.name == self.region:
                    return project.id

            raise Exception(f"No project found for region {self.region}")
        except exceptions.ClientRequestException as e:
            print(f"Failed to get project ID: {e}")
            sys.exit(1)

    def get_endpoint(self, region_id):
        # 处理都柏林地区的特殊情况
        if region_id == "eu-west-101":
            return f"https://elb.{region_id}.myhuaweicloud.eu"
        
        return f"https://elb.{region_id}.myhuaweicloud.com"

    def create_client(self):
        credentials = BasicCredentials(self.access_id, self.access_key, self.project_id)
        endpoint = self.get_endpoint(self.region)
        return (
            ElbClient.new_builder() \
            .with_credentials(credentials) \
            .with_endpoint(endpoint) \
            .build()
        )

    def set_request(self, marker):
        return ListLoadBalancersRequest()

    def get_instances_from_response(self, response):
        result = []
        for instance in json.loads(str(response.loadbalancers)):
            instance["region"] = self.region
            result.append(instance)
        return result

    def list_instance(self):
        response = self.client.list_load_balancers(self.set_request(None))
        return self.get_instances_from_response(response)

    def show(self):
        instance_list = self.list_instance()
        for instance in instance_list:
            print(json.dumps(instance))


# project_id 可以命令行传 None
def main(access_id, access_key, project_id, region):
    try:
        Elb(access_id, access_key, project_id, region).show()
    except Exception as e:
        # https://developer.huaweicloud.com/endpoint?all 支持的区域可能尚未包含在sdk区域配置文件中
        # 对于这种错误直接忽略
        if "Unexpected region_id" in str(e):
            return
        print(f"同步华为云elb资源出错. access_id: {access_id}, region: {region}", file=sys.stderr)
        raise e

if __name__ == "__main__":
    main(sys.argv[1], sys.argv[2], sys.argv[3], sys.argv[4])
