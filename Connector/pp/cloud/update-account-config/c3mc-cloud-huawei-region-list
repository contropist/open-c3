#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
from huaweicloudsdkcore.auth.credentials import BasicCredentials
from huaweicloudsdkcore.exceptions import exceptions
from huaweicloudsdkiam.v3 import *
from huaweicloudsdkecs.v2 import *
from huaweicloudsdkelb.v3 import *
from huaweicloudsdkdns.v2 import *
from huaweicloudsdkrds.v3 import *
from huaweicloudsdkdcs.v2 import *
from huaweicloudsdkkafka.v2 import *

class Huawei:
    def __init__(self, access_id, access_key, iam_user_id, resource_type):
        self.access_id = access_id
        self.access_key = access_key
        self.iam_user_id = iam_user_id
        self.resource_type = resource_type
        self.regions = self.get_regions_and_projects()

    def get_regions_and_projects(self):
        credentials = BasicCredentials(self.access_id, self.access_key)
        
        # 尝试不同的 endpoint
        endpoints = [
            "https://iam.myhuaweicloud.com", 
            "https://iam.eu-west-101.myhuaweicloud.eu" 
        ]
        
        for endpoint in endpoints:
            try:
                iam_client = IamClient.new_builder() \
                    .with_credentials(credentials) \
                    .with_endpoint(endpoint) \
                    .build()

                request = KeystoneListProjectsRequest()
                response = iam_client.keystone_list_projects(request)

                region_project_map = {}
                
                for project in response.projects:
                    if project.name not in ['MOS','as-south-0','na-east-0']:
                        region_project_map[project.name] = project.id
                
                return region_project_map
            
            except exceptions.ClientRequestException as e:
                continue
        
        return {}

    def get_endpoint(self, service, region_id):
        # 处理都柏林地区的特殊情况
        if region_id == "eu-west-101":
            return f"https://{service}.{region_id}.myhuaweicloud.eu"
        # 处理金融专区
        elif region_id == "cn-north-219": 
           return f"https://{service}.{region_id}.jrzq.huaweicloud.com"
        
        return f"https://{service}.{region_id}.myhuaweicloud.com"

    def get_ecs_availability_zones(self):
        ecs_zones = set()
        
        for region, project_id in self.regions.items():
            credentials = BasicCredentials(self.access_id, self.access_key, project_id)
            try:
                endpoint = self.get_endpoint('ecs', region)
                client = EcsClient.new_builder() \
                    .with_credentials(credentials) \
                    .with_endpoint(endpoint) \
                    .build()
                
                request = NovaListAvailabilityZonesRequest()
                response = client.nova_list_availability_zones(request)

                for zone_info in response.availability_zone_info:
                    if zone_info.zone_state.available:
                        ecs_zones.add(f"{region}")

            except exceptions.ClientRequestException as e:
                pass

        return list(ecs_zones)

    def get_elb_availability_zones(self):
        elb_zones = set()
        for region, project_id in self.regions.items():
            credentials = BasicCredentials(self.access_id, self.access_key, project_id)
            try:
                endpoint = self.get_endpoint('elb', region)
                client = ElbClient.new_builder() \
                    .with_credentials(credentials) \
                    .with_endpoint(endpoint) \
                    .build()

                request = ListAvailabilityZonesRequest()
                response = client.list_availability_zones(request)

                for zone_list in response.availability_zones:
                    for zone in zone_list:
                        if zone.state == "ACTIVE":  
                            elb_zones.add(f"{region}")

            except exceptions.ClientRequestException as e:
                pass

        return list(elb_zones)

    def get_dns_availability_zones(self):
        dns_zones = set()

        for region, project_id in self.regions.items():
            credentials = BasicCredentials(self.access_id, self.access_key, project_id)
            try:
                endpoint = self.get_endpoint('dns', region)
                client = DnsClient.new_builder() \
                    .with_credentials(credentials) \
                    .with_endpoint(endpoint) \
                    .build()

                request = ListPrivateZonesRequest()
                request.type = "private"
                response = client.list_private_zones(request)

                for zone in response.zones:
                    if zone.status == "ACTIVE":
                        for router in zone.routers:
                            if router.status == "ACTIVE":
                                dns_zones.add(router.router_region)

            except exceptions.ClientRequestException as e:
                pass

        return list(dns_zones)

    def get_rds_availability_zones(self):
        rds_zones = set()

        for region, project_id in self.regions.items():
            credentials = BasicCredentials(self.access_id, self.access_key, project_id)
            try:
                endpoint = self.get_endpoint('rds', region)
                client = RdsClient.new_builder() \
                    .with_credentials(credentials) \
                    .with_endpoint(endpoint) \
                    .build()

                request = ListInstancesRequest()
                response = client.list_instances(request)

                if response.total_count:
                    rds_zones.add(f"{region}")

            except exceptions.ClientRequestException as e:
                pass

        return list(rds_zones)

    def get_dcs_availability_zones(self):
        dcs_zones = set()

        for region, project_id in self.regions.items():
            credentials = BasicCredentials(self.access_id, self.access_key, project_id)
            try:
                endpoint = self.get_endpoint('dcs', region)
                client = DcsClient.new_builder() \
                    .with_credentials(credentials) \
                    .with_endpoint(endpoint) \
                    .build()

                request = ListAvailableZonesRequest()
                response = client.list_available_zones(request)

                for zone in response.available_zones:
                    if zone.resource_availability:  
                        dcs_zones.add(f"{region}")

            except exceptions.ClientRequestException as e:
                pass

        return list(dcs_zones)

    def get_dms_availability_zones(self):
        dms_zones = set()
        for region, project_id in self.regions.items():
            credentials = BasicCredentials(self.access_id, self.access_key, project_id)
            try:
                endpoint = self.get_endpoint('dms', region)
                client = KafkaClient.new_builder() \
                    .with_credentials(credentials) \
                    .with_endpoint(endpoint) \
                    .build()

                request = ListAvailableZonesRequest()
                response = client.list_available_zones(request)

                for zone in response.available_zones:
                    if zone.resource_availability:  
                        dms_zones.add(f"{region}")

            except exceptions.ClientRequestException as e:
                pass

        return list(dms_zones)

    def display(self):
        global_resources = ["obs"]
        
        if self.resource_type in global_resources:
            sorted_regions = sorted(self.regions.keys(), key=lambda x: ("ap-southeast-1" not in x, x))
            regions = [sorted_regions[0]] if sorted_regions else []
        elif self.resource_type == "ecs":
            regions = self.get_ecs_availability_zones()
        elif self.resource_type == "elb":
            regions = self.get_elb_availability_zones()
        elif self.resource_type == "dns":
            regions = self.get_dns_availability_zones()
        elif self.resource_type == "rds":
            regions = self.get_rds_availability_zones()
        elif self.resource_type == "redis":
            regions = self.get_dcs_availability_zones()
        elif self.resource_type == "kafka":
            regions = self.get_dms_availability_zones()
        else:
            regions = list(self.regions.keys())

        for region in regions:
            print(region)

def main(access_id, access_key, iam_user_id, resource_type):
    Huawei(access_id, access_key, iam_user_id, resource_type).display()

if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[5], sys.argv[6])
