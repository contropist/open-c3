#!/usr/bin/env /data/Software/mydan/python3/bin/python3
# -*- coding: utf-8 -*-

import sys
import json

from aliyunsdkcore.client import AcsClient
from aliyunsdkcore.auth.credentials import AccessKeyCredential
from aliyunsdkecs.request.v20140526.DescribeRegionsRequest import DescribeRegionsRequest

sys.path.append("/data/Software/mydan/Connector/lib/pp")
from c3mc_cloud_aliyun_redis import LibAliyunRedis
from c3mc_cloud_aliyun_rds import LibAliyunRds
from c3mc_cloud_aliyun_fs import LibAliyunFS


class Aliyun:
    def __init__(self, access_id, access_key, resource_type):
        self.access_id = access_id
        self.access_key = access_key
        self.resource_type = resource_type

    def list_ecs_regions(self):
        credentials = AccessKeyCredential(self.access_id, self.access_key)
        client = AcsClient(region_id='cn-hangzhou', credential=credentials)

        request = DescribeRegionsRequest()
        request.set_accept_format('json')

        try:
            response = client.do_action_with_exception(request)
        except Exception as e:
            raise RuntimeError(
                f"拉取区域列表出错, ak: {self.access_id}, resource_type: {self.resource_type}"
            ) from e

        result = [
            item["RegionId"]
            for item in json.loads(str(response, encoding='utf-8'))["Regions"][
                "Region"
            ]
        ]
        return sorted(result)

    def display(self):
        regions = []

        if self.resource_type == "oss":
            regions = ["cn-beijing"]
        elif self.resource_type == "redis":
            regions = LibAliyunRedis(self.access_id, self.access_key, "cn-hangzhou").describe_regions()
            regions.remove("ap-northeast-2")
            regions.remove("cn-guangzhou")
            regions.remove("me-central-1")
            regions.remove("ap-southeast-7")
            regions.remove("eu-central-1")
        elif self.resource_type == "rds":
            regions = LibAliyunRds(self.access_id, self.access_key, "cn-hangzhou").describe_regions()
        elif self.resource_type == "fs":
            regions = LibAliyunFS(self.access_id, self.access_key, "cn-hangzhou").describe_region_list()
            regions.remove("ap-northeast-2")
            regions.remove("ap-southeast-7")
            regions.remove("cn-heyuan")
        else:
            regions = self.list_ecs_regions()
            if self.resource_type == "vpc":
                regions.remove("ap-northeast-2")
                regions.remove("ap-southeast-3")
                regions.remove("ap-southeast-5")
                regions.remove("ap-southeast-6")
                regions.remove("cn-fuzhou")
                regions.remove("cn-guangzhou")
                regions.remove("cn-heyuan")
                regions.remove("cn-nanjing")
                regions.remove("cn-wulanchabu")
                regions.remove("eu-central-1")

        for region in regions:
            if "test" in region:
                continue
            print(region)


def main(access_id, access_key, resource_type):
    Aliyun(access_id, access_key, resource_type).display()


if __name__ == '__main__':
    main(sys.argv[1], sys.argv[2], sys.argv[4])
