#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/AGENT/lib -I/data/Software/mydan/AGENT/private/lib
$0="agent_api";

use HTTP::Server::Simple::PSGI;

*HTTP::Server::Simple::PSGI::_handle_response = sub
{

    my ($self, $res) = @_;

    my $message = $StatusCode{$res->[0]};

    my $response = "HTTP/1.0 $res->[0] $message\015\012";
    my $headers = $res->[1];
    while (my ($k, $v) = splice(@$headers, 0, 2)) {
        $response .= "$k: $v\015\012";
    }
    $response .= "\015\012";

    print STDOUT $response;

    my $body = $res->[2];
    my $cb = sub {
        use Encode;
        Encode::_utf8_off( $_[0] );
        print STDOUT $_[0]
    };

    if (defined $body) {
        if (ref $body eq 'ARRAY') {
            for my $line (@$body) {
                $cb->($line) if length $line;
            }
        } else {
            local $/ = \65536 unless ref $/;
            while (defined(my $line = $body->getline)) {
                $cb->($line) if length $line;
            }
            $body->close;
        }
    } else {
        return HTTP::Server::Simple::PSGI::Writer->new($cb);
    }

};

use Dancer;
use api::region;
use api::project_region_relation;
use api::proxy;
use api::agent;
use api::install;
use api::nodeinfo;
use api::check;
use api::monitor;
use api::inherit;
use api::monitor::config::collector;
use api::monitor::config::rule;
use api::monitor::config::group;
use api::monitor::config::groupuser;
use api::monitor::config::oncall;
use api::monitor::config::mailmon;
use api::monitor::config::user;
use api::monitor::config::kanban;
use api::monitor::alert;
use api::monitor::sender;
use api::selfhealing::config;
use api::selfhealing::task;
use api::networkmonitor;
use api::cloudmon;
dance;
