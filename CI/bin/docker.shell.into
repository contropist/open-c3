#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use MYDan;
use MYDB;
use FindBin qw( $RealBin );
use Code;
use MIME::Base64;

use MYDan::Util::OptConf;

=head1 SYNOPSIS

 $0 [--projectid projectid] [--image centos:7 ]

 $0 [--projectid projectid] [--image centos:7 ] [--tags release-001] 

    [--imageid id] [--treeid id]

=cut

my $option = MYDan::Util::OptConf->load();
my %o = $option->get( qw( projectid=i image=s tags=s imageid=i treeid=i ) )->dump();

$option->assert( qw( projectid image ) );

my $db = MYDB->new( "$RealBin/../conf/conn" );

my $uuid = Code->new( 'build.plugin/dump' )->run( db => $db, map{ $_ => $o{$_} }qw( projectid tags )  );

my $x = eval{ $db->query( "select buildscripts,buildcachepath from openc3_ci_project where id='$o{projectid}'" ) };
die( "get buildscripts info fail:$@" ) if $@;
die( "get buildscripts from mysql fail" ) unless defined $x && ref $x eq 'ARRAY';
die( "projectid is illegal, mismatch: $o{projectid}" ) unless @$x;

my $ishare = '/ishare';
$ishare = "/build/data/$x->[0][1]" if $x->[0][1] && $x->[0][1] =~ /^[a-zA-Z0-9][a-zA-Z0-9_\-\.]*$/;

my $entrypoint = $o{image} =~ /^ci\// ? '/welcome.sh' : '/bin/bash';
if( $x->[0][0] )
{
    my $run = Temp->new( chmod => 0755 )->dump( decode_base64( $x->[0][0] ) );
    my $enter = `head -n 1 $run 2>/dev/null`;
    chomp $enter;
    $entrypoint = '/bin/sh' if $enter && $enter =~ /^#!.*\/sh$/;
    die "write run file fail:$!" if system "mv '$run' '$RealBin/../logs/build_temp_projectid/$uuid/run'";
}

my $user = `id -un`;chop $user;
my $sudo = $user eq 'root' ? '' : 'sudo ';

my $xx = `cat /proc/1/cgroup 2>/dev/null`;
my $indocker = $xx =~ /\b1:.+(docker|lxc|kubepods)/ ? 1 : 0;
my $logpath = $indocker ? "/data/open-c3-data/logs/CI" : "$RealBin/../logs";

$logpath = "$RealBin/../logs" if $ENV{C3_WEB_SHELL_CLUSTER_WEB_TYPE};

if( $o{image} =~ /^\d+\.\d+\.\d+\.\d+$/ )
{
    die "nofind imageid or treeid" unless $o{imageid} && $o{treeid};

    my ( $temppath, $agentauthpath, $remotepath ) = ( "$RealBin/../logs/build_temp_projectid/$uuid", "/data/glusterfs/dockerimage/$o{imageid}.key", "/data/open-c3-ci/$uuid" );
    die "tar fail: $!" if system "cd '$temppath' && tar -zcvf openc3TempData.tar.gz *";
    die "dump data fail: $!" if system "MYDan_Agent_KEY_PATH='$agentauthpath' $MYDan::PATH/dan/tools/rcall -r '$o{image}' dump $temppath/openc3TempData.tar.gz --path '$remotepath/openc3TempData.tar.gz'";
    die "untar fail: $!" if system "YDan_Agent_KEY_PATH='$agentauthpath' $MYDan::PATH/dan/tools/rcall -r '$o{image}' exec 'cd $remotepath && tar -m -zxvf openc3TempData.tar.gz'";

    print "path: $remotepath\n";

    exec "MYDan_Agent_KEY_PATH=$agentauthpath /data/Software/mydan/JOB/bin/cmd.bash --host '$o{image}' --user 'root' --sudo 'root' --projectid $o{treeid} --runcmd 'export OPENC3CIPATH='$remotepath' && cd $remotepath/data\n'";
}
else
{
    $SIG{HUP} = sub
    {
        system "docker kill 'dockershell_ci_$uuid'";
        system "rm -rf '$logpath/build_temp_projectid/$uuid'";
        exit 1;
    };

    print "ishare: $ishare\n";
    my $xx = `docker inspect dns 2>/dev/null |grep -i '"Gateway"'|awk '{print \$2}'|awk -F '"' '{print \$2}'# | grep -E '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+\$'|head -n 1`;
    chomp $xx;
    my $dnsx = '';
    if( $xx)
    {
        print "dns: [$xx]\n";
        $dnsx = "--dns=$xx";
    }
    system "${sudo}/usr/bin/docker run -it --rm $dnsx -v $logpath/build_temp_projectid/$uuid:/build -v /data/open-c3-data/ci-docker-share:/cishare -v /data/open-c3-data/ci-docker-share-id/$o{projectid}:$ishare --workdir=/build/data --name dockershell_ci_$uuid $o{image} $entrypoint";
}
