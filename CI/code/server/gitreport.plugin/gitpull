#!/data/Software/mydan/perl/bin/perl -I/data/Software/mydan/CI/lib -I/data/Software/mydan/CI/private/lib
use strict;
use warnings;
use FindBin qw( $RealBin );
use Logs;
use Temp;

$| ++;

=head1 SYNOPSIS

    'groupid' => '10',
    'path' => '/data/.gitreport.temp/10',
    'ticket' => '',
    'id' => 7,
    'addr' => 'https://github.com/open-c3/test.git',
    'uuid' => 'e462f55943a0cd9afa7c71bc82cbc19b'

=cut

return sub
{
    my %param = @_;

    my ( $groupid, $path, $id, $addr, $uuid, $ticket )
        = @param{qw( groupid path id addr uuid ticket )};

    my $datapath = "$path/data";
    system "mkdir -p '$datapath'" unless -f $datapath;

    my $git = $ticket ? "$RealBin/../bin/git -i " . Temp->new( chmod => 0600 )->dump( $ticket ) : 'git';

    my $error;
    for( 1 .. 2 )
    {
        eval{
            unless( -d "$datapath/$uuid" )
            {
            die "download fail: $!" if system "cd '$datapath' && $git clone $addr $uuid";
            }

            my $dir = "$datapath/$uuid";

            system "cd $dir && ". $git . ' branch -r | grep -v "\->" | while read remote; do ' . $git . ' branch --track "${remote#origin/}" "$remote" 2>&1 ; done';

            my @branch = `cd $dir && git branch`;
            chomp @branch;
            map{ $_ =~ s/^\**\s*// }@branch;

            for my $branch ( @branch )
            {
                die "pull fail:$!" if system "cd $dir && git checkout '$branch' 2>&1 && $git fetch --all && $git pull --all";
            }
        };
        $error = $@;
        last unless $error;
        system "rm -rf '$datapath/$uuid'";
    }
    die "gitpull error: $error" if $error;
}
